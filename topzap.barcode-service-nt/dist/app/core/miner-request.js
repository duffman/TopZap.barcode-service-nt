'use strict';Object.defineProperty(exports,'__esModule',{value:true});const fs=require('fs');const request=require('request');const querystring=require('querystring');const settings_1=require('../settings');var RequestType;(function(RequestType){RequestType[RequestType['GET']=0]='GET';RequestType[RequestType['POST']=1]='POST';RequestType[RequestType['DELETE']=2]='DELETE';RequestType[RequestType['PUT']=3]='PUT';}(RequestType=exports.RequestType||(exports.RequestType={})));class MinerRequest{constructor(reqHeader=null){this.requestHeader=reqHeader;}executeRequest(reqType,reqUri,payload=null){return new Promise((resolve,reject)=>{resolve(null);});}postRequest(reqUri,payload=null){let formData=querystring.stringify(payload);let contentLength=formData.length;console.log('POST REQUEST ::: reqUri ::: >>> ',reqUri);console.log('POST REQUEST ::: formData ::: >>> ',formData);let options2={uri:reqUri,headers:{'user-agent':'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.162 Safari/537.36','cache-control':'no-cache','Content-Length':contentLength,'Content-Type':'application/x-www-form-urlencoded','accept':'*/*'},method:MinerRequest.RequestTypeToStr(RequestType.POST),body:formData};let newRequest2=request.defaults();let scope=this;return new Promise((resolve,reject)=>{return newRequest2(options2,(error,response,body)=>{if(!error&&response.statusCode==200){resolve(body);}else{reject(error);}});});}executeProxyRequest(reqType,reqUri,payload=null){let options={uri:reqUri,ca:fs.readFileSync('./crawlera-ca.crt'),requestCert:true,rejectUnauthorized:true,headers:this.requestHeader,method:MinerRequest.RequestTypeToStr(reqType),json:true,gzip:true};if(payload!=null){options['body']=payload;}let newRequest=request.defaults({'proxy':settings_1.Settings.Endpoints.PROXY_URL});let scope=this;return new Promise((resolve,reject)=>{function callback(error,response,body){if(!error&&response.statusCode==200){resolve(body);}else{reject(error);}}newRequest(options,callback);});}static RequestTypeToStr(reqType){let result='';switch(reqType){case RequestType.GET:result='GET';break;case RequestType.POST:result='POST';break;case RequestType.DELETE:result='DELETE';break;case RequestType.PUT:result='PUT';break;}return result;}}exports.MinerRequest=MinerRequest;