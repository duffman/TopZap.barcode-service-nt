'use strict';Object.defineProperty(exports,'__esModule',{value:true});const Scaledrone=require('scaledrone-node');const pstr_utils_1=require('../../lib/putte-ts/pstr-utils');const channel_message_1=require('../channels.git/channel-message');const zap_message_types_1=require('../models/zap-ts-models/messages/zap-message-types');const logger_1=require('../cli/logger');const bid_cache_db_1=require('../database/bid-cache-db');const channel_config_1=require('../channels.git/channel-config');const channel_config_2=require('../channels.git/channel-config');const drone_events_1=require('../channels.git/drone-events');const TEST_MODE=true;class BidService{constructor(apiClient){this.apiClient=apiClient;this.bidCacheDb=new bid_cache_db_1.BidCacheDb();let channelId=TEST_MODE?channel_config_1.ChannelConfig.getChannelId(channel_config_1.ChannelNames.BidsTest):channel_config_1.ChannelConfig.getChannelId(channel_config_1.ChannelNames.Bids);console.log('Bid Channel ::',channelId);this.drone=new Scaledrone(channelId);this.channel=this.drone.subscribe(channel_config_2.MessagePipes.GetBid);this.drone.on(drone_events_1.DroneEvents.Open,err=>{console.log('Drone OPEN ::',err);});this.drone.on(drone_events_1.DroneEvents.Close,()=>{console.log('Drone ::',drone_events_1.DroneEvents.Close);});this.drone.on(drone_events_1.DroneEvents.Error,err=>{console.log('Drone :: ERR ::',err);});this.drone.on(drone_events_1.DroneEvents.Reconnect,()=>{console.log('Drone ::',drone_events_1.DroneEvents.Reconnect);});this.channel.on(drone_events_1.DroneEvents.Open,err=>{console.log('Channel :: OPEN ::',err);});this.channel.on(drone_events_1.DroneEvents.Close,()=>{console.log('Channel :: CLOSE');});this.channel.on(drone_events_1.DroneEvents.Reconnect,()=>{console.log('Channel ::',drone_events_1.DroneEvents.Reconnect);});this.channel.on(drone_events_1.DroneEvents.Error,err=>{console.log('Channel :: ERR ::',err);});this.channel.on(drone_events_1.DroneEvents.Data,data=>{console.log('Channel :: DATA ::',data);this.onGetBidRequest(data);});}formatOffer(input){let res=-1;try{let resStr=input.trim().replace(',','.');res=parseFloat(resStr);}catch(err){console.log('formatOffer :: ERROR ::',err);res=-1;}return res;}emitGetOffersInit(sessId,data){let mess=new channel_message_1.ChannelMessage(zap_message_types_1.ZapMessageType.GetOffersInit,data,sessId);this.bidsChannel.emitMessage(mess,sessId);}emitVendorOffer(sessId,data){let mess=new channel_message_1.ChannelMessage(zap_message_types_1.ZapMessageType.VendorOffer,data,sessId);this.bidsChannel.emitMessage(mess,sessId);}emitOffersDone(sessId){let mess=new channel_message_1.ChannelMessage(zap_message_types_1.ZapMessageType.GetOffersDone,{},sessId);this.bidsChannel.emitMessage(mess,sessId);}onGetBidRequest(message){console.log('ON NEW BID ---->');let channelMess=message;let code='';let sessId='';try{code=channelMess.data.code;sessId=channelMess.sessId;}catch(ex){console.log('Error extracting data ::',ex);}console.log('BidChannelService :: CODE ::',code);console.log('BidChannelService :: SESSION ::',sessId);if(pstr_utils_1.PStrUtils.isEmpty(code)||pstr_utils_1.PStrUtils.isEmpty(sessId)){if(pstr_utils_1.PStrUtils.isEmpty(code))logger_1.Logger.logError('onGetBidRequest :: CODE Missing ::',code);if(pstr_utils_1.PStrUtils.isEmpty(code))logger_1.Logger.logError('onGetBidRequest :: CODE Missing ::',code);return;}this.executeRequest(code,sessId);}executeRequest(code,sessId){let scope=this;async function execute(){let cachedVendorOffer=await scope.bidCacheDb.getVendorOffer(code,scope.apiClient.vendorId);if(cachedVendorOffer){console.log('Using cahed offer');scope.emitChannelBid(code,sessId,cachedVendorOffer);}else{console.log('Using price service');scope.doCallVendorService(code,sessId);}}execute().then(res=>{});}doCallVendorService(code,sessId){this.callVendorService(code).then(data=>{console.log('doCallVendorService :: ',data);this.emitChannelBid(code,sessId,data);if(data&&data.accepted){this.bidCacheDb.cacheOffer(data);}}).catch(err=>{logger_1.Logger.logFatalError('callVendorService ::',err);});}emitChannelBid(code,sessId,data){let messData=new channel_message_1.ChannelMessage(zap_message_types_1.ZapMessageType.VendorOffer,data,sessId);console.log('Prepping message ::',JSON.stringify(messData));this.drone.publish({room:channel_config_2.MessagePipes.NewBid,message:messData});}callVendorService(code){console.log('callVendorService ::',code);let scope=this;let result=null;return new Promise((resolve,reject)=>{this.apiClient.getOffer(code).then(res=>{if(res.offer!==null){let offerNum=scope.formatOffer(res.offer);res.accepted=offerNum>-1;res.offer=offerNum.toString();res.code=code;}resolve(res);}).catch(err=>{console.log('getOffer :: ERR',err);reject(err);});});}}exports.BidService=BidService;