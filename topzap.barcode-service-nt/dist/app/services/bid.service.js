'use strict';Object.defineProperty(exports,'__esModule',{value:true});const zap_offer_model_1=require('../models/zap-ts-models/zap-offer.model');const channel_1=require('../channels.git/channel');const channel_config_1=require('../channels.git/channel-config');const pstr_utils_1=require('../../lib/putte-ts/pstr-utils');const channel_message_1=require('../channels.git/channel-message');const zap_message_types_1=require('../models/zap-ts-models/messages/zap-message-types');const logger_1=require('../cli/logger');class BidService{constructor(apiClient){this.apiClient=apiClient;this.bidsChannel=new channel_1.Channel(channel_config_1.ChannelNames.Bids,channel_config_1.MessagePipes.GetBid);this.bidsChannel.onChannelData(data=>{this.getBid(data);});}formatOffer(input){let res=-1;try{let resStr=input.trim().replace(',','.');res=parseFloat(resStr);}catch(err){console.log('formatOffer :: ERROR ::',err);res=-1;}return res;}emitGetOffersInit(sessId,data){let mess=new channel_message_1.ChannelMessage(zap_message_types_1.ZapMessageType.GetOffersInit,data,sessId);this.bidsChannel.emitMessage(mess,sessId);}emitVendorOffer(sessId,data){let mess=new channel_message_1.ChannelMessage(zap_message_types_1.ZapMessageType.VendorOffer,data,sessId);this.bidsChannel.emitMessage(mess,sessId);}emitOffersDone(sessId){let mess=new channel_message_1.ChannelMessage(zap_message_types_1.ZapMessageType.GetOffersDone,{},sessId);this.bidsChannel.emitMessage(mess,sessId);}getBid(data){let code=null;try{console.log('BidChannelService :: CODE ::',data.code);console.log('BidChannelService :: SESSION ::',data.sessId);console.log('BidChannelService ::',data);code=data.code;}catch(ex){code=null;}if(pstr_utils_1.PStrUtils.isEmpty(code)){let err=new Error('Code is missing');}else{this.getVendorBid(code).then(bid=>{console.log('VENDOR BID ::',bid);}).catch(err=>{logger_1.Logger.logFatalError('getVendorBid ::',err);});}}getVendorBid(code){let scope=this;let result=new zap_offer_model_1.VendorOfferData();return new Promise((resolve,reject)=>{this.apiClient.getOffer(code).then(res=>{if(res.offer!==null){let offerNum=scope.formatOffer(res.offer);res.accepted=offerNum>-1;res.offer=offerNum.toString();res.code=code;}resolve(res);}).catch(err=>{console.log('getOffer :: ERR',err);reject(err);});});}}exports.BidService=BidService;