'use strict';Object.defineProperty(exports,'__esModule',{value:true});const pstr_utils_1=require('../../lib/putte-ts/pstr-utils');const zap_message_types_1=require('../models/zap-ts-models/messages/zap-message-types');const logger_1=require('../cli/logger');const bid_cache_db_1=require('../database/bid-cache-db');const pubsub_service_1=require('../../lib/topzap.pubsub-lib.git/pubsub-service');const pubsub_message_1=require('../../lib/topzap.pubsub-lib.git/pubsub-message');const pubsub_message_2=require('../../lib/topzap.pubsub-lib.git/pubsub-message');const publub_channels_1=require('../../lib/topzap.pubsub-lib.git/publub-channels');const TEST_MODE=true;class BidService{constructor(apiClient){this.apiClient=apiClient;this.bidCacheDb=new bid_cache_db_1.BidCacheDb();this.pubsub=new pubsub_service_1.PubsubService(true);this.pubsub.subscribe([publub_channels_1.Channels.GetBidChannel]);this.pubsub.onGetBidRequest(msg=>{console.log('BIDS MESSAGE ::',msg);if(msg.type===pubsub_message_2.MessageTypes.GetBid){console.log('GET BID EVENT RECEIVED!!!');console.log('Channel :: DATA ::',msg.data);this.onGetBidRequest(msg);}});}formatOffer(input){let res=-1;try{let resStr=input.trim().replace(',','.');res=parseFloat(resStr);}catch(err){console.log('formatOffer :: ERROR ::',err);res=-1;}return res;}onGetBidRequest(message){console.log('ON NEW BID ---->');let psMess=message;let code='';let sessId='';try{code=psMess.data.code;sessId=psMess.sessId;}catch(ex){console.log('Error extracting data ::',ex);}console.log('BidChannelService :: CODE ::',code);console.log('BidChannelService :: SESSION ::',sessId);if(pstr_utils_1.PStrUtils.isEmpty(code)||pstr_utils_1.PStrUtils.isEmpty(sessId)){if(pstr_utils_1.PStrUtils.isEmpty(code))logger_1.Logger.logError('onGetBidRequest :: CODE Missing ::',code);if(pstr_utils_1.PStrUtils.isEmpty(code))logger_1.Logger.logError('onGetBidRequest :: CODE Missing ::',code);return;}this.executeRequest(code,sessId);}executeRequest(code,sessId){let scope=this;async function execute(){let cachedVendorOffer=await scope.bidCacheDb.getVendorOffer(code,scope.apiClient.vendorId);if(cachedVendorOffer){console.log('Using cahed offer');scope.emitPubsubBid(cachedVendorOffer,sessId);}else{console.log('Using price service');scope.doCallVendorService(code,sessId);}}execute().then(res=>{});}doCallVendorService(code,sessId){this.callVendorService(code).then(data=>{console.log('doCallVendorService :: ',data);this.emitPubsubBid(data,sessId);if(data&&data.accepted){this.bidCacheDb.cacheOffer(data);}}).catch(err=>{logger_1.Logger.logFatalError('callVendorService ::',err);});}emitPubsubBid(data,sessId){let messData=new pubsub_message_1.PubsubMessage(zap_message_types_1.ZapMessageType.VendorOffer,data,sessId);console.log('Prepping message ::',JSON.stringify(messData));this.pubsub.emitNewBidMessage(messData,sessId);}callVendorService(code){console.log('callVendorService ::',code);let scope=this;let result=null;return new Promise((resolve,reject)=>{this.apiClient.getOffer(code).then(res=>{if(res.offer!==null){let offerNum=scope.formatOffer(res.offer);res.accepted=offerNum>-1;res.offer=offerNum.toString();res.code=code;}resolve(res);}).catch(err=>{console.log('getOffer :: ERR',err);reject(err);});});}}exports.BidService=BidService;