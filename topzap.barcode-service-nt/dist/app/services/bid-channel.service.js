'use strict';Object.defineProperty(exports,'__esModule',{value:true});const logger_1=require('../cli/logger');const pstr_utils_1=require('../../lib/putte-ts/pstr-utils');const channel_message_1=require('../channels.git/channel-message');const channel_config_1=require('../channels.git/channel-config');const channel_config_2=require('../channels.git/channel-config');const zap_message_types_1=require('../models/zap-ts-models/messages/zap-message-types');const channel_base_controller_1=require('../channels.git/channel-base.controller');class BidChannelService extends channel_base_controller_1.ChannelBaseController{constructor(bidService){super(channel_config_1.ChannelNames.Bids,channel_config_2.MessagePipes.GetBid);this.bidService=bidService;this.onChannelData(data=>{console.log('BidChannelService :: CODE ::',data.code);console.log('BidChannelService :: SESSION ::',data.sessId);console.log('BidChannelService ::',data);this.getBid(data.code);});}emitGetOffersInit(sessId,data){let mess=new channel_message_1.ChannelMessage(zap_message_types_1.ZapMessageType.GetOffersInit,data,sessId);this.emitMessage(mess);}emitVendorOffer(sessId,data){let mess=new channel_message_1.ChannelMessage(zap_message_types_1.ZapMessageType.VendorOffer,data,sessId);this.emitMessage(mess);}emitOffersDone(sessId){let mess=new channel_message_1.ChannelMessage(zap_message_types_1.ZapMessageType.GetOffersDone,{},sessId);this.emitMessage(mess);}getBid(code,message=null){if(pstr_utils_1.PStrUtils.isEmpty(code)){let err=new Error('Code is missing');message.data(err);}else{this.bidService.getVendorBid(code).then(bid=>{console.log('VENDOR BID ::',bid);}).catch(err=>{logger_1.Logger.logFatalError('getVendorBid ::',err);});}}}exports.BidChannelService=BidChannelService;