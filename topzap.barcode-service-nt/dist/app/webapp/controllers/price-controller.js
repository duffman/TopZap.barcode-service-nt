'use strict';Object.defineProperty(exports,'__esModule',{value:true});const logger_1=require('../../cli/logger');const mmp_api_client_1=require('../../../miners/api/mmp-api-client');const momox_api_client_1=require('../../../miners/api/momox-api-client');const ziffit_api_client_1=require('../../../miners/api/ziffit-api-client');const wbg_api_client_1=require('../../../miners/api/wbg-api-client');const pstr_utils_1=require('../../../lib/putte/pstr-utils');const cli_commander_1=require('../../cli/cli-commander');const compiled_offers_result_1=require('../../models/compiled-offers-result');const controller_utils_1=require('./controller.utils');const socket_io_server_1=require('../../../lib/coldmind-igniter/coldmind/socket-io.server');const message_types_1=require('../../../lib/coldmind-igniter/messaging/message-types');const get_offers_messages_1=require('../../models/zap-ts-models/messages/get-offers-messages');const igniter_settings_1=require('../../../lib/coldmind-igniter/igniter.settings');const zap_message_types_1=require('../../models/zap-ts-models/messages/zap-message-types');const zap_offer_model_1=require('../../models/zap-ts-models/zap-offer.model');class PriceController{constructor(){let scope=this;this.apiClients=new Array();this.serviceServer=new socket_io_server_1.SocketServer(true);this.serviceServer.startListen(igniter_settings_1.IgniterSettings.DefSocketServerPort);this.serviceServer.onServerStarted(port=>{console.log('EVENT :: Server Started on Port ::',port);});this.serviceServer.onServerStartError(err=>{console.log('EVENT :: Server Start FAIL ::',err);});this.serviceServer.onMessage(this.onMessage.bind(this));}onMessage(message){if(!message.is(message_types_1.MessageType.Action)||!message.idIs(zap_message_types_1.ZapMessageType.GetOffers)){return;}let vendorCount=this.apiClients.length;this.emitOfferMessage(message,zap_message_types_1.ZapMessageType.GetOffersInit,new get_offers_messages_1.GetOffersInit(vendorCount));this.doSearch(message.data.code,message).then(res=>{logger_1.Logger.logGreen('SEARCH RES ::',res);this.emitOfferMessage(message,zap_message_types_1.ZapMessageType.GetOffersDone);}).catch(err=>{logger_1.Logger.logError('onMessage :: doSearch :: err ::',err);});}emitSearchDone(message){message.reply(message_types_1.MessageType.Action,zap_message_types_1.ZapMessageType.GetOffersDone,{});}initRouter(routes){let scope=this;logger_1.Logger.logPurple('PriceController :: initRouter');routes.get('/:code',(req,resp)=>{let barcode=req.params.code;scope.doSearch(barcode).then(result=>{resp.json(result);resp.end();}).catch(err=>{logger_1.Logger.logError('Routes Code :: err',err);controller_utils_1.ControllerUtils.internalError(resp);});});routes.post('/code',(req,resp)=>{console.log('',req.body);let barcode=req.body.code;scope.doSearch(barcode).then(result=>{resp.json(result);}).catch(err=>{logger_1.Logger.logError('Routes Code :: err',err);controller_utils_1.ControllerUtils.internalError(resp);});});}setApiClients(clients){this.apiClients=clients;}doSearch(barcode,message=null){return new Promise((resolve,reject)=>{if(pstr_utils_1.PStrUtils.isEmpty(barcode)){let err=new Error('Code is missing');message.error(err);reject(err);}else{return this.runMiners(barcode,message).then(res=>{resolve(res);}).catch(err=>{reject(err);});}});}emitOfferMessage(message,type,data=null){data=data===null?{}:data;message.reply(message_types_1.MessageType.Action,type,data);}formatOffer(input){let res=-1;try{let resStr=input.trim().replace(',','.');res=parseFloat(resStr);}catch(err){console.log('formatOffer :: ERROR ::',err);res=-1;}return res;}runMiners(code,message=null){let scope=this;let result=new compiled_offers_result_1.CompiledOffersResult();let apiClients=scope.apiClients;function getVendorResultPromise(index){let validIndex=index>=0&&index<=scope.apiClients.length;return new Promise((resolve,reject)=>{if(validIndex){let apiClient=apiClients[index];console.log('apiClient ::',apiClient.name);apiClient.getOffer(code).then(res=>{if(res.offer!==null){let offerNum=scope.formatOffer(res.offer);res.accepted=offerNum>-1;res.offer=offerNum.toString();res.code=code;}console.log('INNAN :::',res);if(res.success){if(message!==null){scope.emitOfferMessage(message,zap_message_types_1.ZapMessageType.VendorOffer,res);}else{let reqRes=new zap_offer_model_1.VendorOfferData();reqRes.code=code;scope.emitOfferMessage(message,zap_message_types_1.ZapMessageType.VendorReqRes,null);}result.vendors.push(res);}resolve(res);}).catch(err=>{console.log('getOffer :: ERR',err);reject(err);});}else{reject(new Error('Invalid API Client'));}});}let vendorResultPromises=new Array();return new Promise((resolve,reject)=>{try{for(let index=0;index<apiClients.length;index++){vendorResultPromises.push(getVendorResultPromise(index));}Promise.all(vendorResultPromises).catch(err=>{console.log('ERRRROOLL ::',err);message.error(err);}).then(()=>{logger_1.Logger.logYellow('Promises Done');resolve(result);});}catch(err){message.error(err);reject(err);}});}debugSetMiners(){try{let momoxMiner=new momox_api_client_1.MomoxAppApi(true);let wbgMiner=new wbg_api_client_1.WbgAppApi();let ziffitMiner=new ziffit_api_client_1.ZiffitAppApi();let magpieMiner=new mmp_api_client_1.MmpAppApi();this.apiClients.push(wbgMiner);this.apiClients.push(momoxMiner);this.apiClients.push(ziffitMiner);this.apiClients.push(magpieMiner);}catch(err){logger_1.Logger.logError('Error Initializing Miners ::',err);return false;}return true;}}exports.PriceController=PriceController;if(cli_commander_1.CliCommander.haveArgs()){let priceController=new PriceController();priceController.debugSetMiners();let barcode='0045496590444';priceController.runMiners(barcode).then(res=>{console.log('RES ::',res);}).catch(err=>{console.log('ERROR ::',err);});}