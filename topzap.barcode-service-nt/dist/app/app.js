'use strict';Object.defineProperty(exports,'__esModule',{value:true});const Scaledrone=require('scaledrone-node');const logger_1=require('./cli/logger');const constants_1=require('../inc/constants');const channel_1=require('./channels.git/channel');const channel_config_1=require('./channels.git/channel-config');const channel_config_2=require('./channels.git/channel-config');const bid_service_1=require('./services/bid.service');const momox_api_client_1=require('../api-clients/momox/momox-api-client');const mmp_api_client_1=require('../api-clients/musicmagpie/mmp-api-client');const ziffit_api_client_1=require('../api-clients/ziffit/ziffit-api-client');const wbg_api_client_1=require('../api-clients/webuygames/wbg-api-client');const drone_events_1=require('./channels.git/drone-events');class Application{constructor(debug=false,apiClientVendor){this.debug=debug;logger_1.Logger.logGreen('Starting up...');logger_1.Logger.logPurple(constants_1.Constants.APP_NAME);this.doIt();switch(apiClientVendor){case'momox':this.bidService=new bid_service_1.BidService(new momox_api_client_1.MomoxAppApi());break;case'mmp':this.bidService=new bid_service_1.BidService(new mmp_api_client_1.MmpAppApi());break;case'ziffit':this.bidService=new bid_service_1.BidService(new ziffit_api_client_1.ZiffitAppApi());break;case'wbg':this.bidService=new bid_service_1.BidService(new wbg_api_client_1.WbgAppApi());break;}if(this.bidService===null){logger_1.Logger.logError('Could not load Miner API Client for ::',apiClientVendor);process.exit(220);}this.serviceChannel=new channel_1.Channel(channel_config_1.ChannelNames.Service,channel_config_2.MessagePipes.Service);this.serviceChannel.onChannelOpen(data=>{console.log('Service Channel OPEN ::',data);});this.serviceChannel.onChannelData(data=>{console.log('Service Channel DATA ::',data);});}doIt(){let serviceDrone=new Scaledrone('T4eUrfAVDy7ODb0h');let serviceChannel=serviceDrone.subscribe('register');let message={name:'kalle'};serviceChannel.on(drone_events_1.DroneEvents.Open,error=>{if(error){logger_1.Logger.logError('Error :: serviceChannel ::',error);return;}console.log('Publishing register message ::',message);serviceDrone.publish({room:'register',message:message});serviceDrone.publish({room:channel_config_2.MessagePipes.Service,message:message});serviceDrone.publish({room:'register',message:{'kalle':'kula'}});serviceDrone.publish({room:channel_config_2.MessagePipes.Service,message:{'kalle':'kula'}});});}}exports.Application=Application;