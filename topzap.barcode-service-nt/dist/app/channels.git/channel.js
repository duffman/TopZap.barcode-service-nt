'use strict';Object.defineProperty(exports,'__esModule',{value:true});const Scaledrone=require('scaledrone-node');const events_1=require('events');const channel_config_1=require('./channel-config');const drone_events_1=require('./drone-events');class Channel{constructor(channelName,messagePipe){this.channelName=channelName;this.messagePipe=messagePipe;this.eventEmitter=new events_1.EventEmitter();let config=new channel_config_1.ChannelConfig();let channelInfo=channel_config_1.ChannelConfig.getDroneChannel(channelName);if(channelInfo===null){let error=new Error('Channel not found');throw error;}this.drone=new Scaledrone(channelInfo.channelID);this.drone.on('open',()=>{this.eventEmitter.removeAllListeners();this.channel=this.drone.subscribe(messagePipe);this.attachEventHandlers();});}attachEventHandlers(){let channel=this.channel;channel.on(drone_events_1.DroneEvents.Open,data=>{this.eventEmitter.emit(drone_events_1.DroneEvents.Open,data);});channel.on(drone_events_1.DroneEvents.Data,data=>{this.eventEmitter.emit(drone_events_1.DroneEvents.Data,data);});channel.on(drone_events_1.DroneEvents.Error,data=>{this.eventEmitter.emit(drone_events_1.DroneEvents.Error,data);});channel.on(drone_events_1.DroneEvents.Close,data=>{this.eventEmitter.emit(drone_events_1.DroneEvents.Close,data);});channel.on(drone_events_1.DroneEvents.Disconnect,data=>{this.eventEmitter.emit(drone_events_1.DroneEvents.Disconnect,data);});channel.on(drone_events_1.DroneEvents.Reconnect,data=>{this.eventEmitter.emit(drone_events_1.DroneEvents.Reconnect,data);});}emitMessage(message,messagePipe=null){console.log('Emitting to Pipe \''+messagePipe+'\'');messagePipe=messagePipe!==null?messagePipe:this.messagePipe;this.drone.publish({room:messagePipe,message:message});}onChannelOpen(listener){this.eventEmitter.addListener(drone_events_1.DroneEvents.Open,listener);}onChannelData(listener){this.eventEmitter.addListener(drone_events_1.DroneEvents.Data,listener);}onChannelError(listener){this.eventEmitter.addListener(drone_events_1.DroneEvents.Error,listener);}onChannelClose(listener){this.eventEmitter.addListener(drone_events_1.DroneEvents.Close,listener);}onChannelDisconnect(listener){this.eventEmitter.addListener(drone_events_1.DroneEvents.Disconnect,listener);}onChannelReconnect(listener){this.eventEmitter.addListener(drone_events_1.DroneEvents.Reconnect,listener);}}exports.Channel=Channel;